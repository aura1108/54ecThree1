/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserDocumentService } from "../userDocument.service";
import { UserDocumentCreateInput } from "./UserDocumentCreateInput";
import { UserDocument } from "./UserDocument";
import { UserDocumentFindManyArgs } from "./UserDocumentFindManyArgs";
import { UserDocumentWhereUniqueInput } from "./UserDocumentWhereUniqueInput";
import { UserDocumentUpdateInput } from "./UserDocumentUpdateInput";

export class UserDocumentControllerBase {
  constructor(protected readonly service: UserDocumentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserDocument })
  async createUserDocument(
    @common.Body() data: UserDocumentCreateInput
  ): Promise<UserDocument> {
    return await this.service.createUserDocument({
      data: {
        ...data,

        userId: {
          connect: data.userId,
        },
      },
      select: {
        createdAt: true,
        id: true,
        pan: true,
        pdf1: true,
        pdf2: true,
        pdf3: true,
        updatedAt: true,

        userId: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserDocument] })
  @ApiNestedQuery(UserDocumentFindManyArgs)
  async userDocuments(@common.Req() request: Request): Promise<UserDocument[]> {
    const args = plainToClass(UserDocumentFindManyArgs, request.query);
    return this.service.userDocuments({
      ...args,
      select: {
        createdAt: true,
        id: true,
        pan: true,
        pdf1: true,
        pdf2: true,
        pdf3: true,
        updatedAt: true,

        userId: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserDocument })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userDocument(
    @common.Param() params: UserDocumentWhereUniqueInput
  ): Promise<UserDocument | null> {
    const result = await this.service.userDocument({
      where: params,
      select: {
        createdAt: true,
        id: true,
        pan: true,
        pdf1: true,
        pdf2: true,
        pdf3: true,
        updatedAt: true,

        userId: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserDocument })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserDocument(
    @common.Param() params: UserDocumentWhereUniqueInput,
    @common.Body() data: UserDocumentUpdateInput
  ): Promise<UserDocument | null> {
    try {
      return await this.service.updateUserDocument({
        where: params,
        data: {
          ...data,

          userId: {
            connect: data.userId,
          },
        },
        select: {
          createdAt: true,
          id: true,
          pan: true,
          pdf1: true,
          pdf2: true,
          pdf3: true,
          updatedAt: true,

          userId: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserDocument })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserDocument(
    @common.Param() params: UserDocumentWhereUniqueInput
  ): Promise<UserDocument | null> {
    try {
      return await this.service.deleteUserDocument({
        where: params,
        select: {
          createdAt: true,
          id: true,
          pan: true,
          pdf1: true,
          pdf2: true,
          pdf3: true,
          updatedAt: true,

          userId: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
