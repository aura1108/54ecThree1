/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  UserDocument as PrismaUserDocument,
  UserAuth as PrismaUserAuth,
} from "@prisma/client";

export class UserDocumentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserDocumentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userDocument.count(args);
  }

  async userDocuments(
    args: Prisma.UserDocumentFindManyArgs
  ): Promise<PrismaUserDocument[]> {
    return this.prisma.userDocument.findMany(args);
  }
  async userDocument(
    args: Prisma.UserDocumentFindUniqueArgs
  ): Promise<PrismaUserDocument | null> {
    return this.prisma.userDocument.findUnique(args);
  }
  async createUserDocument(
    args: Prisma.UserDocumentCreateArgs
  ): Promise<PrismaUserDocument> {
    return this.prisma.userDocument.create(args);
  }
  async updateUserDocument(
    args: Prisma.UserDocumentUpdateArgs
  ): Promise<PrismaUserDocument> {
    return this.prisma.userDocument.update(args);
  }
  async deleteUserDocument(
    args: Prisma.UserDocumentDeleteArgs
  ): Promise<PrismaUserDocument> {
    return this.prisma.userDocument.delete(args);
  }

  async getUserId(parentId: string): Promise<PrismaUserAuth | null> {
    return this.prisma.userDocument
      .findUnique({
        where: { id: parentId },
      })
      .userId();
  }
}
