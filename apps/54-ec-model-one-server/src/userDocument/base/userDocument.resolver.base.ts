/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserDocument } from "./UserDocument";
import { UserDocumentCountArgs } from "./UserDocumentCountArgs";
import { UserDocumentFindManyArgs } from "./UserDocumentFindManyArgs";
import { UserDocumentFindUniqueArgs } from "./UserDocumentFindUniqueArgs";
import { CreateUserDocumentArgs } from "./CreateUserDocumentArgs";
import { UpdateUserDocumentArgs } from "./UpdateUserDocumentArgs";
import { DeleteUserDocumentArgs } from "./DeleteUserDocumentArgs";
import { UserAuth } from "../../userAuth/base/UserAuth";
import { UserDocumentService } from "../userDocument.service";
@graphql.Resolver(() => UserDocument)
export class UserDocumentResolverBase {
  constructor(protected readonly service: UserDocumentService) {}

  async _userDocumentsMeta(
    @graphql.Args() args: UserDocumentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserDocument])
  async userDocuments(
    @graphql.Args() args: UserDocumentFindManyArgs
  ): Promise<UserDocument[]> {
    return this.service.userDocuments(args);
  }

  @graphql.Query(() => UserDocument, { nullable: true })
  async userDocument(
    @graphql.Args() args: UserDocumentFindUniqueArgs
  ): Promise<UserDocument | null> {
    const result = await this.service.userDocument(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserDocument)
  async createUserDocument(
    @graphql.Args() args: CreateUserDocumentArgs
  ): Promise<UserDocument> {
    return await this.service.createUserDocument({
      ...args,
      data: {
        ...args.data,

        userId: {
          connect: args.data.userId,
        },
      },
    });
  }

  @graphql.Mutation(() => UserDocument)
  async updateUserDocument(
    @graphql.Args() args: UpdateUserDocumentArgs
  ): Promise<UserDocument | null> {
    try {
      return await this.service.updateUserDocument({
        ...args,
        data: {
          ...args.data,

          userId: {
            connect: args.data.userId,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserDocument)
  async deleteUserDocument(
    @graphql.Args() args: DeleteUserDocumentArgs
  ): Promise<UserDocument | null> {
    try {
      return await this.service.deleteUserDocument(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => UserAuth, {
    nullable: true,
    name: "userId",
  })
  async getUserId(
    @graphql.Parent() parent: UserDocument
  ): Promise<UserAuth | null> {
    const result = await this.service.getUserId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
