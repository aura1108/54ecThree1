/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  UserDetail as PrismaUserDetail,
  UserAuth as PrismaUserAuth,
} from "@prisma/client";

export class UserDetailServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserDetailCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userDetail.count(args);
  }

  async userDetails(
    args: Prisma.UserDetailFindManyArgs
  ): Promise<PrismaUserDetail[]> {
    return this.prisma.userDetail.findMany(args);
  }
  async userDetail(
    args: Prisma.UserDetailFindUniqueArgs
  ): Promise<PrismaUserDetail | null> {
    return this.prisma.userDetail.findUnique(args);
  }
  async createUserDetail(
    args: Prisma.UserDetailCreateArgs
  ): Promise<PrismaUserDetail> {
    return this.prisma.userDetail.create(args);
  }
  async updateUserDetail(
    args: Prisma.UserDetailUpdateArgs
  ): Promise<PrismaUserDetail> {
    return this.prisma.userDetail.update(args);
  }
  async deleteUserDetail(
    args: Prisma.UserDetailDeleteArgs
  ): Promise<PrismaUserDetail> {
    return this.prisma.userDetail.delete(args);
  }

  async getUserId(parentId: string): Promise<PrismaUserAuth | null> {
    return this.prisma.userDetail
      .findUnique({
        where: { id: parentId },
      })
      .userId();
  }
}
