/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserDetailService } from "../userDetail.service";
import { UserDetailCreateInput } from "./UserDetailCreateInput";
import { UserDetail } from "./UserDetail";
import { UserDetailFindManyArgs } from "./UserDetailFindManyArgs";
import { UserDetailWhereUniqueInput } from "./UserDetailWhereUniqueInput";
import { UserDetailUpdateInput } from "./UserDetailUpdateInput";
import { UserAuthFindManyArgs } from "../../userAuth/base/UserAuthFindManyArgs";
import { UserAuth } from "../../userAuth/base/UserAuth";
import { UserAuthWhereUniqueInput } from "../../userAuth/base/UserAuthWhereUniqueInput";

export class UserDetailControllerBase {
  constructor(protected readonly service: UserDetailService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserDetail })
  async createUserDetail(
    @common.Body() data: UserDetailCreateInput
  ): Promise<UserDetail> {
    return await this.service.createUserDetail({
      data: data,
      select: {
        address: true,
        city: true,
        createdAt: true,
        dob: true,
        email: true,
        gender: true,
        id: true,
        name: true,
        pan: true,
        phone: true,
        pinCode: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserDetail] })
  @ApiNestedQuery(UserDetailFindManyArgs)
  async userDetails(@common.Req() request: Request): Promise<UserDetail[]> {
    const args = plainToClass(UserDetailFindManyArgs, request.query);
    return this.service.userDetails({
      ...args,
      select: {
        address: true,
        city: true,
        createdAt: true,
        dob: true,
        email: true,
        gender: true,
        id: true,
        name: true,
        pan: true,
        phone: true,
        pinCode: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userDetail(
    @common.Param() params: UserDetailWhereUniqueInput
  ): Promise<UserDetail | null> {
    const result = await this.service.userDetail({
      where: params,
      select: {
        address: true,
        city: true,
        createdAt: true,
        dob: true,
        email: true,
        gender: true,
        id: true,
        name: true,
        pan: true,
        phone: true,
        pinCode: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserDetail(
    @common.Param() params: UserDetailWhereUniqueInput,
    @common.Body() data: UserDetailUpdateInput
  ): Promise<UserDetail | null> {
    try {
      return await this.service.updateUserDetail({
        where: params,
        data: data,
        select: {
          address: true,
          city: true,
          createdAt: true,
          dob: true,
          email: true,
          gender: true,
          id: true,
          name: true,
          pan: true,
          phone: true,
          pinCode: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserDetail(
    @common.Param() params: UserDetailWhereUniqueInput
  ): Promise<UserDetail | null> {
    try {
      return await this.service.deleteUserDetail({
        where: params,
        select: {
          address: true,
          city: true,
          createdAt: true,
          dob: true,
          email: true,
          gender: true,
          id: true,
          name: true,
          pan: true,
          phone: true,
          pinCode: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/userId")
  @ApiNestedQuery(UserAuthFindManyArgs)
  async findUserId(
    @common.Req() request: Request,
    @common.Param() params: UserDetailWhereUniqueInput
  ): Promise<UserAuth[]> {
    const query = plainToClass(UserAuthFindManyArgs, request.query);
    const results = await this.service.findUserId(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        otp: true,
        pan: true,
        phone: true,
        updatedAt: true,

        userDetails: {
          select: {
            id: true,
          },
        },

        userDocument: {
          select: {
            id: true,
          },
        },

        verified: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userId")
  async connectUserId(
    @common.Param() params: UserDetailWhereUniqueInput,
    @common.Body() body: UserAuthWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userId: {
        connect: body,
      },
    };
    await this.service.updateUserDetail({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userId")
  async updateUserId(
    @common.Param() params: UserDetailWhereUniqueInput,
    @common.Body() body: UserAuthWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userId: {
        set: body,
      },
    };
    await this.service.updateUserDetail({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userId")
  async disconnectUserId(
    @common.Param() params: UserDetailWhereUniqueInput,
    @common.Body() body: UserAuthWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userId: {
        disconnect: body,
      },
    };
    await this.service.updateUserDetail({
      where: params,
      data,
      select: { id: true },
    });
  }
}
