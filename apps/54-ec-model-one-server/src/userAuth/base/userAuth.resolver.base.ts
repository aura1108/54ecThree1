/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserAuth } from "./UserAuth";
import { UserAuthCountArgs } from "./UserAuthCountArgs";
import { UserAuthFindManyArgs } from "./UserAuthFindManyArgs";
import { UserAuthFindUniqueArgs } from "./UserAuthFindUniqueArgs";
import { CreateUserAuthArgs } from "./CreateUserAuthArgs";
import { UpdateUserAuthArgs } from "./UpdateUserAuthArgs";
import { DeleteUserAuthArgs } from "./DeleteUserAuthArgs";
import { UserDetail } from "../../userDetail/base/UserDetail";
import { UserDocument } from "../../userDocument/base/UserDocument";
import { UserAuthService } from "../userAuth.service";
@graphql.Resolver(() => UserAuth)
export class UserAuthResolverBase {
  constructor(protected readonly service: UserAuthService) {}

  async _userAuthsMeta(
    @graphql.Args() args: UserAuthCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserAuth])
  async userAuths(
    @graphql.Args() args: UserAuthFindManyArgs
  ): Promise<UserAuth[]> {
    return this.service.userAuths(args);
  }

  @graphql.Query(() => UserAuth, { nullable: true })
  async userAuth(
    @graphql.Args() args: UserAuthFindUniqueArgs
  ): Promise<UserAuth | null> {
    const result = await this.service.userAuth(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserAuth)
  async createUserAuth(
    @graphql.Args() args: CreateUserAuthArgs
  ): Promise<UserAuth> {
    return await this.service.createUserAuth({
      ...args,
      data: {
        ...args.data,

        userDetails: args.data.userDetails
          ? {
              connect: args.data.userDetails,
            }
          : undefined,

        userDocument: args.data.userDocument
          ? {
              connect: args.data.userDocument,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => UserAuth)
  async updateUserAuth(
    @graphql.Args() args: UpdateUserAuthArgs
  ): Promise<UserAuth | null> {
    try {
      return await this.service.updateUserAuth({
        ...args,
        data: {
          ...args.data,

          userDetails: args.data.userDetails
            ? {
                connect: args.data.userDetails,
              }
            : undefined,

          userDocument: args.data.userDocument
            ? {
                connect: args.data.userDocument,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserAuth)
  async deleteUserAuth(
    @graphql.Args() args: DeleteUserAuthArgs
  ): Promise<UserAuth | null> {
    try {
      return await this.service.deleteUserAuth(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => UserDetail, {
    nullable: true,
    name: "userDetails",
  })
  async getUserDetails(
    @graphql.Parent() parent: UserAuth
  ): Promise<UserDetail | null> {
    const result = await this.service.getUserDetails(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => UserDocument, {
    nullable: true,
    name: "userDocument",
  })
  async getUserDocument(
    @graphql.Parent() parent: UserAuth
  ): Promise<UserDocument | null> {
    const result = await this.service.getUserDocument(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
